#!/usr/bin/env python3

import time
import argparse
import logging
import sys
import os
import signal
from hooks.utils import launch_process

from see import Environment
from see.context import QEMUContextFactory

SHORT_TIMEOUT = 30
TIMEOUT = 60
RUNTIME = 600

LOGFILE_NAME = "sampleExecution.log"

FORMAT = '%(asctime)-15s  %(levelname) -8s %(message)s'

logging.basicConfig(filename=LOGFILE_NAME,level=logging.DEBUG, format=FORMAT, datefmt='%Y-%m-%d %H:%M:%S')
LOGGER = logging.getLogger(__name__)  

def main():
    arguments = parse_arguments()

    context_factory = QEMUContextFactory(arguments.context)

    with Environment(context_factory, arguments.hooks) as environment:
        protocol(environment.context, arguments.sample, arguments.command)


def protocol(context, sample_path, execution_command):
    logtail = launch_process("gnome-terminal", "-e", "tail -f %s" % LOGFILE_NAME)
    context.poweron()

    wait_for_ip_address(context, TIMEOUT*2)
    time.sleep(TIMEOUT)
    
    startSample(context, sample_path, execution_command)
    context.shutdown(timeout=TIMEOUT*2)
    print("Starting analysis...")
    context.trigger('start_analysis')
    context.trigger('wait_analysis')
    print("Analysis completed.")

def takeSnapshot(context):
    context.pause()
    print("Taking memory snapshot...")
    LOGGER.debug("Pausing sandbox. Taking memory snapshot...")
    context.trigger('snapshots_capture')
    LOGGER.debug("Resuming sandbox...")
    print("Completed.")
    context.resume()

def startSample(context, sample_path, execution_command):
    takeSnapshot(context)
    LOGGER.debug("Starting sample...")
    context.trigger('run_sample', sample=sample_path, command=execution_command)
    time.sleep(TIMEOUT)
    takeSnapshot(context)

def wait_for_ip_address(context, timeout):
    LOGGER.debug("Waiting guest to be ready...")
    timestamp = time.time()

    while time.time() - timestamp < timeout:
        if context.ip4_address is not None:
            context.trigger('ip_address', address=context.ip4_address)
            print ('Ip address ' + context.ip4_address + ' connected')
            return
        time.sleep(1)
        
    raise TimeoutError("Waiting for IP address")


def parse_arguments():
    parser = argparse.ArgumentParser(description='Execute a sample within a Sandbox.')

    parser.add_argument('context', help='path to Context JSON configuration')
    parser.add_argument('sample', help='path to Sample to execute')
    parser.add_argument('-k', '--hooks', default={}, help='path to Hooks JSON configuration')
    parser.add_argument('-c', '--command', default='start {sample}',
                        help="""command used to start the sample.
                        The string {sample} will be expanded to the actual file name within the guest.
                        Example: 'notepad.exe {sample}'""")

    return parser.parse_args()


if __name__ == '__main__':
    main()